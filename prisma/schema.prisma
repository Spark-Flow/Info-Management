// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum CivilStatus {
  SINGLE
  MARRIED
  WIDOWED
  SEPARATED
  DIVORCED
}

enum ClassList {
  KINDER1
  KINDER2
  GRADE1
  GRADE2
  GRADE3
  GRADE4
  GRADE5
  GRADE6
  GRADE7
  GRADE8
  GRADE9
  GRADE10
}

enum PaymentFeeType {
  TUITION_FEE
  MISCELLANEOUS_FEE
  BOOKS
  UNIFORM
  FIELD_TRIP
  SCHOOL_SUPPLIES
  SCHOOL_SERVICE
  OTHERS
  SCHOOL_ID
  FOUNDATION_TSHIRT
  GRADUATION_FEE
  RECOGNITION_FEE
  FORM_137
  CERTIFICATIONS
  ENTRANCE_FEE
}

enum ModeOfPayment {
  CASH
  CHECK
  CREDIT_CARD
  GCASH
  PAYMAYA
  ONLINE_BANKING
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
}

enum PaymentFrequency {
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
}

// Model for the academic session
// This model will be assign to everything that is related to the academic year, like classes, students, teachers, etc. and will associate them to a certain year, like 2021-2022, add validation, and make sure to have only one active academic session at a given time, a session can be active if the current date is between the start and end date of the session. You can allow viewing of the previous academic sessions but only one session can be active at a time.
// TODO:
model AcademicSession {
  id       String   @id @default(uuid())
  start    DateTime
  end      DateTime
  isActive Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model for Teachers
// A Teacher can have multiple classes
model Teachers {
  id             String      @id @default(uuid())
  email          String
  teacher_number String      @unique
  first_name     String
  last_name      String
  middle_name    String?
  birthday       DateTime    @default("2000-01-01T00:00:00Z")
  gender         Gender
  nationality    String
  religion       String
  civil_status   CivilStatus
  address_line1  String
  address_line2  String?
  city           String
  zip_code       String
  cell_number    String
  imageUrl       String?
  SSS            String?
  PAGIBIG        String?
  PHILHEALTH     String?
  TIN            String?
  date_joined    DateTime
  date_resigned  DateTime?

  ClassTeachers ClassTeachers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Students {
  id                String   @id @default(uuid())
  student_number    String   @unique
  first_name        String
  last_name         String
  middle_name       String?
  birthday          DateTime @default("2000-01-01T00:00:00Z")
  gender            Gender
  nationality       String
  religion          String
  address_line1     String
  address_line2     String?
  city              String
  zip_code          String
  cell_number       String
  imageUrl          String?
  father_name       String
  father_occupation String?
  mother_name       String
  mother_occupation String?
  guardian_name     String?
  guardian_relation String?
  guardian_number   String?
  guardian_address  String?

  Payment Payment[]
  classId String?
  Classes Classes?  @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classes {
  id   String    @id @default(uuid())
  name ClassList @unique

  Students            Students[]
  ClassTeachers       ClassTeachers[]
  PaymentFeeStructure PaymentFeeStructure[]
  ClassSubjects       ClassSubjects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subjects {
  id   String @id @default(uuid())
  name String @unique

  classSubjects ClassSubjects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassSubjects {
  classId   String
  Classes   Classes  @relation(fields: [classId], references: [id])
  subjectId String
  Subjects  Subjects @relation(fields: [subjectId], references: [id])

  @@id([classId, subjectId])
}

model ClassTeachers {
  classId   String
  Classes   Classes  @relation(fields: [classId], references: [id])
  teacherId String
  Teachers  Teachers @relation(fields: [teacherId], references: [id])

  @@id([classId, teacherId])
}

model Payment {
  id        String           @id @default(uuid())
  amount    Float
  status    PaymentStatus    @default(UNPAID)
  frequency PaymentFrequency
  mode      ModeOfPayment

  studentId String
  Student   Students @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentFee {
  id     String         @id @default(uuid())
  type   PaymentFeeType
  amount Float

  paymentFeeStructureId String
  PaymentFeeStructure   PaymentFeeStructure @relation(fields: [paymentFeeStructureId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentFeeStructure {
  id String @id @default(uuid())

  PaymentFee PaymentFee[]
  classId    String
  Classes    Classes      @relation(fields: [classId], references: [id])
}
